@page "/fetchdata"
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
@if(vendors == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <p><em>@vendors.Count()</em></p>
            }
@**
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
*@
@code {
    //private WeatherForecast[] forecasts;
    private Vendor[] vendors;

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        vendors = await Http.GetFromJsonAsync<Vendor[]>("api/vendors");
        //forecasts = new WeatherForecast[2];
    }

    public class Vendor
    {
        
        public string Id { get; set; }

        
        public string Name { get; set; }

        
        public string EmailId { get; set; }

        
        public List<string> Orders { get; set; }

       
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
