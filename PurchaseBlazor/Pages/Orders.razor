@page "/orders"
@using System.Globalization
@inject HttpClient _client
<h1>Suivi des commandes</h1>
<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudIcon Icon="@Icons.Material.Outlined.List"></MudIcon>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">Liste des commandes</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="OpenAddMessageBox" Color="Color.Inherit"/>
            <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit"/>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (!string.IsNullOrWhiteSpace(_message))
        {
            <MessageAlert Message="@_message" Severity="@_severity" CloseAlert="CloseAlert"/>
        }
        <MudTable @ref="_mudTable" Items="@_ordersList" Dense="@_dense"
                   Striped="true" Hover="true" Breakpoint="Breakpoint.Sm"
                   @bind-SelectedItem="_selectedOrder" Loading="@_loading"
                   LoadingProgressColor="Color.Success">
            <ToolBarContent>
                <MudText Inline="true" Typo="Typo.h6">Liste des commandes</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchTexte" Placeholder="Recherche..."
                               Adornment="Adornment.Start"
                               AdornmentIcon="@Icons.Material.Filled.Search"
                               IconSize="Size.Medium"
                               Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Nom Agent</MudTh>
                <MudTh>Unité</MudTh>
                <MudTh>N°Ligne</MudTh>
                <MudTh>PR</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Localisation</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Date PR</MudTh>
                <MudTh>Date Approbation</MudTh>
                <MudTh>PO</MudTh>
                <MudTh>Age</MudTh>
                <MudTh>Status</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.AgentName</MudTd>
                <MudTd>@context.UnitName</MudTd>
                <MudTd>@context.NoLigne.ToString()</MudTd>
                <MudTd>@context.ReqNumber.ToString()</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@context.Localisation</MudTd>
                <MudTd>@context.Type</MudTd>
                <MudTd>@context.PrDate.ToString(CultureInfo.InvariantCulture)</MudTd>
                <MudTd>@context.ApprovedDate.ToString(CultureInfo.InvariantCulture)</MudTd>
                <MudTd>@context.PurchaseOrder</MudTd>
                <MudTd>@CalculeAge(DateTime.Now, context.ApprovedDate).ToString()</MudTd>
                <MudTd>@context.Status</MudTd>

                <MudTd>
                    <MudIconButton Class="pa-0" Icon="@Icons.Material.Filled.Edit" aria-label="Modifier" Color="Color.Inherit"/>
                </MudTd>
                <MudTd>
                    <MudIconButton Class="pa-0" Icon="@Icons.Material.Filled.Delete" aria-label="Supprimer" Color="Color.Inherit"/>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>

        </MudTable>
    </MudCardContent>

</MudCard>

<MudMessageBox @ref="_addMessageBox" Title="Ajouter une commande"  CancelText="Annuler">
    @* TODO: Formulaire ajout commande a mettre *@
    <MessageContent>
        <div style="min-width: 400px;">
            <EditForm Model="_addOrder" OnValidSubmit="OnValideSubmit">
                <DataAnnotationsValidator/>
                <MudCard>
                    <MudCardContent>
                        <MudTextField Class="d-flex mb-2" @bind-Value="_addOrder.AgentName" Label="Nom agent" For="() => _addOrder.AgentName"
                                      Margin="_marginDense" Variant="Variant.Outlined"/>
                        <div class="d-flex justify-space-between py-2">
                            <MudTextField Class="mr-2" @bind-Value="_addOrder.NoLigne" Label="Nombre de ligne" For="@(() => _addOrder.NoLigne)"
                                          Margin="_marginDense" Variant="Variant.Outlined"/>

                            <MudTextField @bind-Value="_addOrder.UnitName" Label="Unité" For="() => _addOrder.UnitName"
                                           Margin="_marginDense" Class="ml-2" Variant="Variant.Outlined"/>
                        </div>
                        <MudTextField @bind-Value="_addOrder.Description" Label="Description" For="() => _addOrder.Description"
                                       Margin="_marginDense" Class="d-flex py-2" Variant="Variant.Outlined"/>
                        <div class="d-flex justify-space-between py-2">
                            <MudTextField @bind-Value="_addOrder.ReqNumber" Label="PR" For="() => _addOrder.ReqNumber"
                                           Margin="_marginDense" Class="mr-2" Variant="Variant.Outlined"/>
                            <MudTextField @bind-Value="_addOrder.Localisation" Label="Localisation" For="() => _addOrder.Localisation"
                                           Margin="_marginDense" Class="ml-2" Variant="Variant.Outlined"/>
                        </div>


                        <div class="d-flex justify-space-between py-2">
                            <MudTextField @bind-Value="_addOrder.Type" Label="Type" For="() => _addOrder.Type"
                                           Margin="_marginDense" Class="mr-2" Variant="Variant.Outlined"/>
                            <MudTextField @bind-Value="_addOrder.PrDate" Label="Date PR" For="() => _addOrder.PrDate"
                                           Margin="_marginDense" Class="ml-2" Variant="Variant.Outlined"/>
                        </div>

                        <div class="d-flex justify-space-between py-2">
                            <MudTextField @bind-Value="_addOrder.ApprovedDate" Label="Date Approbation" For="() => _addOrder.ApprovedDate"
                                           Margin="_marginDense" Class="mr-2" Variant="Variant.Outlined"/>
                            <MudSelect @bind-Value="_addOrder.Status" Class="ml-2" Label="Status" For="() => _addOrder.Status" T="string" Variant="Variant.Outlined" Margin="_marginDense">
                                @foreach (var status in Status)
                                {
                                    <MudSelectItem Value="@status">@status</MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        <div class="d-flex justify-space-between py-2">
                            <MudTextField @bind-Value="_addOrder.PurchaseOrder" Label="PO" For="() => _addOrder.PurchaseOrder"
                                           Margin="_marginDense" Class="mr-2" Variant="Variant.Outlined"/>
                            <MudTextField @bind-Value="_addOrder.DatePo" Label="Date PO" For="() => _addOrder.DatePo"
                                           Margin="_marginDense" Class="ml-2" Variant="Variant.Outlined"/>
                        </div>

                        <MudTextField @bind-Value="_addOrder.Amount" Label="Montant" For="() => _addOrder.Amount"
                                       Margin="_marginDense" Class="d-flex py-2" Variant="Variant.Outlined"/>

                        <MudAutocomplete @bind-Value="_addOrder.VendorId" Label="Fournisseur" Margin="_marginDense" Variant="Variant.Outlined"
                                          For="() => _addOrder.VendorId" Class="d-flex py-2"
                                          SearchFunc="FindVendorsAsync"/>


                    </MudCardContent>
                   
                </MudCard>
            </EditForm>
        </div>
    </MessageContent>
    <NoButton>
        <MudButton  Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Cancel"
                           Color="Color.Warning">
                    Annuler
                </MudButton>
    </NoButton>
    <YesButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add"
                   Color="Color.Success">
            Ajouter
        </MudButton>
    </YesButton>
    

</MudMessageBox>
<MudMessageBox @ref="_updateMessageBox" CancelText="Annuler">
    @* TODO: Formulaire Mise à jour commande a mettre *@
</MudMessageBox>
<MudMessageBox @ref="_deleteMessageBox" CancelText="Annuler">
    @* TODO: Formulaire suppression commande a mettre *@
</MudMessageBox>

@code {
    private string _message = "";
    private Severity _severity = Severity.Info;
    private List<Order> _ordersList = new List<Order>();
    private MudTable<Order> _mudTable;
    private bool _dense = true;
    private Margin _marginDense = Margin.Dense;
    private Order _selectedOrder = null;
    private Order _addOrder;
    private bool _loading = false;
    private string _searchTexte = "";
    private Task<List<Order>> _ordersLoading;
    private Task<HttpResponseMessage> _orderLoading;
    private MudMessageBox _addMessageBox;
    private MudMessageBox _updateMessageBox;
    private MudMessageBox _deleteMessageBox;

    private List<string> Status = new List<string>
    {
        "PR PENDING",
        "INQUERY SEND", "TECHNICAL CLEARANCE",
        "PO APPROVAL", "PO RELEASED",
        "WAITING PROFORMA", "DPI&AC", "COMPLETED"
    };


    private int CalculeAge(DateTime d2, DateTime d1) => Age(d1, d2);

    private int Age(DateTime dateDebut, DateTime dateFin)
    {
        return (dateFin - dateDebut).Days;
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            _ordersLoading = _client.GetFromJsonAsync<List<Order>>("api/orders/Get");
            _loading = !_ordersLoading.IsCompleted;
            _ordersList = await _ordersLoading;
            if (_ordersLoading.IsCompleted)
            {
                _loading = false;
            }
        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
            _loading = false;
        }
    }

    public void CloseAlert()
    {
        _message = "";
    }

    //Add new order
    private async Task OnValideSubmit(EditContext context)
    {
        await AddNewOrder(_addOrder);
        _message = "Bouton cliqué.";
    }

    private async Task AddNewOrder(Order order)
    {
        try
        {
            _orderLoading = _client.PostAsJsonAsync("api/orders/Post", order);
            _loading = !_orderLoading.IsCompleted;
            var statusMessage = await _orderLoading;
            _message = statusMessage.IsSuccessStatusCode ? "Commande ajoutée avec succés. " : "Erreur lors de l'ajout";
            _severity = _message.Contains("Erreur") ? Severity.Error : Severity.Success;
            _ordersList.Add(order);
        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
        }

        _loading = false;
    }

    //Update one order
    private async Task UpdateSelectedOrder(Order order)
    {
        try
        {
            _orderLoading = _client.PutAsJsonAsync($"api/Orders/Put/{order.Id}", order);
            _loading = !_orderLoading.IsCompleted;

            var statusMessage = await _orderLoading;
            _message = statusMessage.IsSuccessStatusCode ? "Commande modifiée avec succés." : "Erreur lors de la mis à jour";
            _severity = _message.Contains("Erreur") ? Severity.Error : Severity.Success;
        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
        }

        _loading = false;
    }

    //Delete one order
    private async Task DeleteSelectedOrder(Order order)
    {
        try
        {
            _orderLoading = _client.DeleteAsync($"api/Orders/Delete/{order.Id}");
            _loading = !_orderLoading.IsCompleted;

            var statusMessage = await _orderLoading;
            _message = statusMessage.IsSuccessStatusCode ? "Commande supprimée avec succés." : "Erreur lors de la suppression!!!";
            _severity = _message.Contains("Erreur") ? Severity.Error : Severity.Success;
        }
        catch (Exception ex)
        {
            _message = ex.Message;
            _severity = Severity.Error;
        }
        finally
        {
            _loading = false;
        }
    }

    //Open messageBox Add Order
    private async Task OpenAddMessageBox()
    {
        _addOrder = new Order();
        
        bool? result = await _addMessageBox.Show();
        _message = result == null ? "Ajout de la commande Annulée" : "???";
        StateHasChanged();
    }

    private async Task OpenUpdateMessageBox(Order order)
    {
        bool? result = await _updateMessageBox.Show();
        _message = result == null ? "Mise à jour Annulée." : "";
        StateHasChanged();
    }


    private async Task OpenDeleteMessageBox(Order order)
    {
        bool? result = await _deleteMessageBox.Show();
        _message = result == null ? "Suppression de la commande Annulée." : "";
        StateHasChanged();
    }

    //find vendor for Autocomplete
    private async Task<IEnumerable<string>> FindVendorsAsync(string searchVendor)
    {
        if (string.IsNullOrWhiteSpace(searchVendor))
            return Array.Empty<string>();

        var vendors = await _client.GetFromJsonAsync<IEnumerable<Vendor>>($"api/Vendors/GetByName/{searchVendor}");
        return vendors.Where(v => v.Name.Contains(searchVendor)).Select(v => new string(v.Name)).ToList();
    }


}